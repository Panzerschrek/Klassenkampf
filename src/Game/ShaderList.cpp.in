#include "ShaderList.hpp"
#include <utility>
#include <cstdint>
#include <cstddef>


namespace KK
{

namespace
{

${SHADER_INCLUDES_LIST}


using ShaderSourceRef= std::pair<const uint8_t*, size_t>;
ShaderSourceRef GetShaderSource(const ShaderNames shader_name)
{
	switch(shader_name)
	{
		#define PROCESS_SHADER(X) case ShaderNames::X: return ShaderSourceRef(X, sizeof(X));
		${SHADER_LOOKUP_LIST}
	}
	return ShaderSourceRef(nullptr, 0u);
}

} // namespace

vk::UniqueShaderModule CreateShader(vk::Device vk_device, ShaderNames shader_name)
{
	const ShaderSourceRef source= GetShaderSource(shader_name);
	if(source.first == nullptr)
		return vk::UniqueShaderModule();

	return vk_device.createShaderModuleUnique(
		vk::ShaderModuleCreateInfo(
			vk::ShaderModuleCreateFlags(),
			source.second,
			reinterpret_cast<const uint32_t*>(source.first)));
}

} // namespace KK
